---
- block:

    - name: Set domain variables
      set_fact:
        domain_parts: "{{ base_domain.split('.') }}"

    - name: Get existing DNS records
      uri:
        url: "https://api.namecheap.com/xml.response"
        method: POST
        body_format: form-urlencoded
        body:
          ApiUser: "{{ namecheap_api_user }}"
          ApiKey: "{{ namecheap_api_key }}"
          UserName: "{{ namecheap_username }}"
          Command: "namecheap.domains.dns.getHosts"
          ClientIp: "{{ namecheap_whitelisted_ip }}"
          SLD: "{{ domain_parts[-2] }}"
          TLD: "{{ domain_parts[-1] }}"
        return_content: true
      register: existing_records

    - name: Parse existing records
      set_fact:
        existing_hosts: "{{ existing_records.content | ansible.utils.from_xml | json_query('ApiResponse.CommandResponse.DomainDNSGetHostsResult.host') }}"

    - name:  show existing_hosts
      debug:
        msg: "{{ existing_hosts }}"

    - name: Filter valid hosts with @Name attribute
      set_fact:
        valid_hosts: "{{ existing_hosts | selectattr('@Name', 'defined') | list }}"


    - name: Filter out old challenge records
      set_fact:
        filtered_hosts: "{{ valid_hosts | rejectattr('@Name', 'equalto', '_acme-challenge.' + base_domain) | list }}"

    - name: Prepare records body
      set_fact:
        dns_body:
          ApiUser: "{{ namecheap_api_user }}"
          ApiKey: "{{ namecheap_api_key }}"
          UserName: "{{ namecheap_username }}"
          Command: "namecheap.domains.dns.setHosts"
          ClientIp: "{{ namecheap_whitelisted_ip }}"
          SLD: "{{ domain_parts[-2] }}"
          TLD: "{{ domain_parts[-1] }}"

    - name: Add existing records to body
      set_fact:
        dns_body: "{{ dns_body | combine({
          'HostName' ~ (idx + 1): item['@Name'],
          'RecordType' ~ (idx + 1): item['@Type'],
          'Address' ~ (idx + 1): item['@Address'],
          'TTL' ~ (idx + 1): item['@TTL']
        }) }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        index_var: idx

    - name: Add challenge records dynamically
      set_fact:
        dns_body: "{{ dns_body | combine({
          'HostName' ~ (filtered_hosts | length + idx + 1): '_acme-challenge.' + '.'.join(domain_parts[:-2]),
          'RecordType' ~ (filtered_hosts | length + idx + 1): 'TXT',
          'Address' ~ (filtered_hosts | length + idx + 1): item,
          'TTL' ~ (filtered_hosts | length + idx + 1): '60'
        }) }}"
      loop: "{{ challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] }}"
      loop_control:
        index_var: idx
      when: challenge_data.changed


    - name: Update Namecheap DNS records
      uri:
        url: "https://api.namecheap.com/xml.response"
        method: POST
        body_format: form-urlencoded
        body: "{{ dns_body }}"
        return_content: true
      when: challenge_data.changed

    - name: Debug DNS Challenge Information
      debug:
        msg:
          - "Current Domain: {{ requested_domain }}"
          - "Base Domain: {{ base_domain }}"
          - "Current TXT Records: {{ valid_hosts | selectattr('@Type', 'equalto', 'TXT') | map(attribute='@Address') | list }}"
          - "Challenge Records to Add:"
          - "- Record: _acme-challenge.{{ base_domain }}"
          - "- Values: {{ challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] }}"
          - "Let's Encrypt Challenge Requirements:"
          - "- Record Type: {{ challenge_data.authorizations[requested_domain].challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='type') | first }}"
          - "- Token: {{ challenge_data.authorizations[requested_domain].challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='token') | first }}"
      when: challenge_data.changed
      ignore_errors: true

    - name: Initial wait for DNS propagation
      pause:
        minutes: "{{ dns_wait_time }}"
      when: challenge_data.changed

    - name: Check DNS propagation across multiple providers
      shell: "dig +short TXT _acme-challenge.{{ base_domain }} @{{ item }}"
      register: multi_dns_check
      until: >
        (challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] | length > 0) and
        (challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] | select('in', multi_dns_check.stdout) | list | length ==
        challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] | length)
      retries: "{{ dns_resolution_retries }}"
      delay: "{{ dns_retry_interval }}"
      changed_when: false
      with_items:
        - "8.8.8.8"
        - "1.1.1.1"
        - "208.67.222.222"
        - "9.9.9.9"
      when: challenge_data.changed

    - name: Validate DNS records
      uri:
        url: "https://api.namecheap.com/xml.response"
        method: POST
        body_format: form-urlencoded
        body:
          ApiUser: "{{ namecheap_api_user }}"
          ApiKey: "{{ namecheap_api_key }}"
          UserName: "{{ namecheap_username }}"
          Command: "namecheap.domains.dns.getHosts"
          ClientIp: "{{ namecheap_whitelisted_ip }}"
          SLD: "{{ domain_parts[-2] }}"
          TLD: "{{ domain_parts[-1] }}"
        return_content: true
      register: existing_records



    - name: Display DNS challenge information
      debug:
        msg:
          - "Current Domain: {{ requested_domain }}"
          - "Base Domain: {{ base_domain }}"
          - "Current TXT Records: {{ existing_hosts | selectattr('@Type', 'equalto', 'TXT') | map(attribute='@Address') | list }}"
          - "Challenge Records to Add:"
          - "- Record: _acme-challenge.{{ base_domain }}"
          - "- Values: {{ challenge_data.challenge_data_dns['_acme-challenge.' + base_domain] }}"
          - "Let's Encrypt Challenge Requirements:"
          - "- Record Type: {{ challenge_data.authorizations[requested_domain].challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='type') | first }}"
          - "- Token: {{ challenge_data.authorizations[requested_domain].challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='token') | first }}"
      when: challenge_data.changed
      ignore_errors: true

  rescue:
    - name: Handle DNS update errors
      debug:
        msg: "An error occurred while updating DNS records."
  when: renew_certificate is defined and renew_certificate
