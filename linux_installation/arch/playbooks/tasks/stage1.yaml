---
- name: Configure ZFS on Arch Linux
  hosts: localhost
  become: true
  vars_files:
    - ../vars.yaml

  tasks:
    - name: Fail if device_name is not specified
      fail:
        msg: "Please specify the device_name variable (e.g., -e device_name=/dev/sda)"
      when: device_name == '/dev/xxx'

    - name: Install ZFS in the ArchISO
      ansible.builtin.shell: curl -s https://raw.githubusercontent.com/eoli3n/archiso-zfs/master/init | bash
      args:
        executable: /bin/bash
      when: use_archzfs_repo | default(true) |bool

    - name: Set partition variables
      set_fact:
        efi_partition: "{{ device_name }}{% if 'nvme' in device_name %}p{% endif %}1"
        zfs_partition: >-
          {% if use_luks | bool %}
          /dev/mapper/{{ luks_volume_name }}
          {% else %}
          {{ device_name }}{% if 'nvme' in device_name %}p{% endif %}2
          {% endif %}
        luks_partition: "{{ device_name }}{% if 'nvme' in device_name %}p{% endif %}2" 


    - name: Zap all partitions on disk
      command: sgdisk --zap-all {{ device_name }}

    - name: Create EFI partition
      command: sgdisk -n1:1M:+512M -t1:EF00 {{ device_name }}

    - name: Create ZFS partition
      command: sgdisk -n2:0:0 -t2:BF00 {{ device_name }}

    - name: Run partprobe
      command: partprobe

    - name: Format EFI partition
      filesystem:
        fstype: vfat
        dev: "{{ efi_partition }}"
        opts: "-F 32 -n EFI"

    - name: (Create and) open the LUKS container; name it {{ luks_volume_name }}
      community.crypto.luks_device:
        device: "{{ luks_partition }}"
        state: "opened"
        name: "{{ luks_volume_name }}"
        passphrase: "{{ luks_passphrase }}"
      when: use_luks | default(false) | bool

    - name: Load ZFS module
      modprobe:
        name: zfs
        state: present

    - name: Create ZFS pool
      command: >
        zpool create -f -o ashift=12
        -O acltype=posixacl
        -O relatime=on
        -O xattr=sa
        -O dnodesize=legacy
        -O normalization=formD
        -O mountpoint=none
        -O canmount=off
        -O devices=off
        -O compression=lz4
        -R /mnt
        zroot {{ zfs_partition }}

    - name: Create ZFS datasets
      zfs:
        name: "{{ item.name }}"
        state: present
        extra_zfs_properties:
          mountpoint: "{{ item.mountpoint }}"
          canmount: "{{ item.canmount | default(omit) }}"
      loop: "{{ zfs_partition_names }}"

    - name: Export ZFS pool
      command: zpool export zroot
      when: not use_luks| default(false) | bool

    - name: Import ZFS pool
      command: zpool import -d /dev/disk/by-path -R /mnt zroot -N
      when: not use_luks| default(false) | bool

    - name: Handle LUKS disks
      block:
        - name: umount ZFS drives
          ansible.posix.mount:
            path: "{{ item }}"
            state: unmounted
          loop:
            - "/mnt/home"
            - "/mnt/boot/EFI"
            - "/mnt"
        - name: Export ZFS on LUKS
          command: zpool export zroot

        - name: Close the existing LUKS container {{ luks_volume_name }}
          community.crypto.luks_device:
            state: "closed"
            name: "{{ luks_volume_name }}"
    
        - name: Run partprobe
          command: partprobe

        - name: Reopen the existing LUKS container {{ luks_volume_name }}
          community.crypto.luks_device:
            device: "{{ luks_partition }}"
            state: "opened"
            name: "{{ luks_volume_name }}"
            passphrase: "{{ luks_passphrase }}"

        - name: Import ZFS pool
          command: zpool import -d {{ zfs_partition }} -R /mnt zroot -N
          
      when: use_luks | default(false) | bool
      
    - name: Mount ZFS root dataset
      command: zfs mount zroot/ROOT/default

    - name: Mount ZFS home directory
      command: zfs mount zroot/data/home

    - name: Set bootfs property
      command: zpool set bootfs=zroot/ROOT/default zroot

    - name: Set cachefile property
      command: zpool set cachefile=/etc/zfs/zpool.cache zroot

    - name: Create ZFS cache directory
      file:
        path: /mnt/etc/zfs
        state: directory

    - name: Copy ZFS cache file
      copy:
        src: /etc/zfs/zpool.cache
        dest: /mnt/etc/zfs/zpool.cache

    - name: Create EFI mount directory
      file:
        path: /mnt/boot/EFI
        state: directory

    - name: Run partprobe
      command: partprobe

    - name: Mount EFI partition
      mount:
        path: /mnt/boot/EFI
        src: "{{ efi_partition }}"
        fstype: vfat
        state: mounted

    - name: Remount NFS share
      mount:
        path: /var/cache/pacman/pkg
        src: "{{ nfs_path }}"
        fstype: nfs
        state: mounted
      when:
        - network_pacman_cache | bool

    - name: Add custom repository to pacman.conf
      ansible.builtin.blockinfile:
        path: /etc/pacman.conf
        insertbefore: '^\[core\]'
        block: |
          [custom]
          SigLevel = Optional TrustAll
          Server = file:///var/cache/pacman/pkg
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR CUSTOM REPO"
      when: use_custom_repo| default(false) | bool


    - name: Install base system
      command: pacstrap /mnt linux-lts base base-devel intel-ucode nano nfs-utils ansible python-passlib

    - name: Generate fstab
      shell: genfstab -U /mnt |grep -v nfs >> /mnt/etc/fstab

    - name: Update the mirrorlist
      shell: reflector > /mnt/etc/pacman.d/mirrorlist
      
    - name: Copy playbook files to /mnt/mnt
      ansible.builtin.copy:
        src: /root/linux-helpers/linux_installation/arch/playbooks/
        dest: /mnt/mnt
        owner: root
        group: root
        mode: '0644'