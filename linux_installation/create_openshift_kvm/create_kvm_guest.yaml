---
- name: Create VM on KVM Host
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    install_libvirt: true
    install_sushy: false
  tasks:
    - name: Libvirt Install Tasks
      block:
        - name: Get VMs list
          community.libvirt.virt:
            command: list_vms
          register: existing_vms
          changed_when: no
        
        - name: Create Control Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          loop: "{{ CONTROL_PLANE_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: vm_name not in existing_vms.list_vms

        - name: Create Worker Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          loop: "{{ WORKER_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: 
            - vm_name not in existing_vms.list_vms 
            - WORKER_NAMES is defined 
            - NUMBER_OF_WORKER_VMS !=0
      when: install_libvirt| default(false) | bool

    - name: register control plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}"
      register: control_plane_info
      loop: "{{ CONTROL_PLANE_NAMES }}"
      loop_control:
        loop_var: vm_name
    
    - name: register worker plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}"
      register: worker_info
      loop: "{{ WORKER_NAMES }}"
      loop_control:
        loop_var: vm_name
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Set UUID variables for control plane VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ control_plane_info.results }}"

    - name: Set UUID variables for worker VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ worker_info.results }}"
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Display only UUID variables
      debug:
        msg: "{{ item }}: {{ hostvars[inventory_hostname][item] }}"
      loop: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'match', '.*_uuid$') | map(attribute='key') | list }}"

    - name: Ensure LOCAL {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
        
    - name: Save Install Config
      ansible.builtin.include_role:
        name: vault_write_storage
      vars:
        vault_secret_key_name: install-config
        full_path_to_file: '{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml'
    
    - name: Configure RedFish for KVM
      ansible.builtin.include_role:
        name: sushy_tools_setup
      when: install_sushy| default(false) | bool

    - name: Set Host Interface Facts
      ansible.builtin.include_role:
        name: get_network_interfaces 

    - name: Create install-config.yaml
      ansible.builtin.include_role:
        name: openshift_install_config

- name: Configure DNS
  hosts: dns
  gather_facts: false
  vars_files:
    vars.yaml
  vars:
    create_dns: false
  tasks:
    - name: Creating DNS Entries...
      ansible.builtin.include_role:
        name: dns_settings_pfsense
      when: create_dns| default(false)|bool

- name: Activate Bastion
  hosts: bastion
  gather_facts: true
  vars_files:
    vars.yaml
  tasks:
    - name: Ensure REMOTE {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
        owner: "{{ INSTALL_USER }}"  
      
    - name: Copy install-config.yaml to bastion
      copy:
        src: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        dest: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        mode: '0644'
        owner: "{{ INSTALL_USER }}" 
    - name: Decide Which Binary to install with
      ansible.builtin.set_fact:
        OPENSHIFT_INSTALL_BINARY:  "{{ 'openshift-baremetal-install' if OPENSHIFT_BAREMETAL_INSTALL | default(false) | bool else 'openshift-install' }}"  

    - name: Check if versioned binaries already exist
      stat:
        path: "{{ INSTALL_USER_BINARY_PATH }}/{{ item }}-{{ OPENSHIFT_VERSION }}"
      register: binary_check
      loop:
        - oc
        - "{{ OPENSHIFT_INSTALL_BINARY }}"

    - name: Get the proper version of OpenShift
      ansible.builtin.include_role:
        name: download_ocp_binaries
      when: binary_check.results | map(attribute='stat.exists') | select('equalto', false) | list | length > 0

    - name: Setup KVM on Bastion
      ansible.builtin.include_role:
        name: bastion_libvirt
    
    - name: Sleep for 30 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 30
      delegate_to: localhost

    - name: Launch OpenShift Installer
      become: true
      become_user: "{{ INSTALL_USER }}"
      ansible.builtin.command: "{{ INSTALL_USER_BINARY_PATH }}/{{ OPENSHIFT_INSTALL_BINARY }}-{{ OPENSHIFT_VERSION }} --dir={{ OPENSHIFT_INSTALL_DIRECTORY }} create cluster"
      register: openshift_install_results
