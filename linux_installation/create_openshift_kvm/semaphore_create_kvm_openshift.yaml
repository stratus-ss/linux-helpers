---
- name: Create VM on KVM Host
  hosts: kvm
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    install_libvirt: true
    install_sushy: false
  tasks:
    - name: Set the facts
      set_fact:
        ADDITIONAL_TRUST_BUNDLE: "{{ ADDITIONAL_TRUST_BUNDLE | default(false) }}"
        API_VIP: "{{ API_VIP | default('') }}" 
        APP_VIP: "{{ APP_VIP | default('') }}"
        BASE_DOMAIN: "{{ BASE_DOMAIN | default('') }}"
        BOOTSTRAP_STATIC_IP: "{{ BOOTSTRAP_STATIC_IP | default('') }}"
        BOOTSTRAP_GW: "{{ BOOTSTRAP_GW | default('') }}"
        BOOTSTRAP_DNS: "{{ BOOTSTRAP_DNS | default('') }}"
        CLUSTER_NAME: "{{ CLUSTER_NAME | default('') }}"
        CLUSTER_NETWORK: 172.30.0.0/16
        DNS_NAMESERVER: "{{ DNS_NAMESERVER | default('') }}"
        HASHI_VAULT_URL: "{{ HASHI_VAULT_URL | default('') }}"
        HASHI_VAULT_ROLE_ID: ""
        HASHI_VAULT_SECRET_ID:  ""
        HASHI_VAULT_PATH: "{{ HASHI_VAULT_PATH | default('configs/data/' + CLUSTER_NAME + '.' + BASE_DOMAIN) }}"
        HTTPS_PROXY: "{{ HTTPS_PROXY | default('') }}"
        HTTP_PROXY: "{{ HTTP_PROXY | default('') }}"
        INSTALL_USER: "{{ INSTALL_USER | default('ocp') }}"
        INSTALL_USER_BINARY_PATH: "{{ INSTALL_USER_BINARY_PATH | default('/home/' + INSTALL_USER + '/.local/bin/') }}"
        KVM_PACKAGES: "{{ KVM_PACKAGES | default(['qemu-kvm', 'libvirt', 'virt-install']) }}"
        LIBVIRT_POOL_NAME: "{{ LIBVIRT_POOL_NAME | default('default-pool') }}"
        LIBVIRT_POOL_DIRECTORY: "{{ LIBVIRT_POOL_DIRECTORY | default('libvirt') }}"
        LIBVIRT_DISK_PATH: "{{ LIBVIRT_DISK_PATH | default('/var/lib/' + LIBVIRT_POOL_DIRECTORY) }}"
        LIBVIRT_DISK_SIZE: "{{ LIBVIRT_DISK_SIZE | default(120) }}"
        
        # Optional worker-specific storage settings - fallback to control plane settings if not specified
        WORKER_LIBVIRT_POOL_NAME: "{{ WORKER_LIBVIRT_POOL_NAME | default(LIBVIRT_POOL_NAME) }}"
        WORKER_LIBVIRT_POOL_DIRECTORY: "{{ WORKER_LIBVIRT_POOL_DIRECTORY | default(LIBVIRT_POOL_DIRECTORY) }}"
        WORKER_LIBVIRT_DISK_PATH: "{{ WORKER_LIBVIRT_DISK_PATH | default(LIBVIRT_DISK_PATH) }}"
        WORKER_LIBVIRT_DISK_SIZE: "{{ WORKER_LIBVIRT_DISK_SIZE | default(LIBVIRT_DISK_SIZE) }}"
        OPENSHIFT_VERSION: "{{ OPENSHIFT_VERSION | default('4.18.14h') }}"
        OPENSHIFT_BAREMETAL_INSTALL: "{{ OPENSHIFT_BAREMETAL_INSTALL | default(true) }}"
        OPENSHFIT_DOWNLOAD_URL: "{{ OPENSHFIT_DOWNLOAD_URL | default('https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/' + OPENSHIFT_VERSION) }}"
        OPENSHIFT_INSTALL_DIRECTORY: "{{ OPENSHIFT_INSTALL_DIRECTORY | default('/home/' + INSTALL_USER + '/' + CLUSTER_NAME) }}"
        NETWORK_BRIDGE: "{{ NETWORK_BRIDGE | default('br0') }}"
        NETWORK_INTERFACE: "{{ NETWORK_INTERFACE | default('eth0') }}"
        NETWORK_GATEWAY: "{{ NETWORK_GATEWAY | default('') }}"
        NETWORK_CIDR: "{{ NETWORK_CIDR | default(24) }}"
        NO_PROXY: "{{ NO_PROXY | default('localhost,127.0.0.1') }}"
        NUMBER_OF_MASTER_VMS: "{{ NUMBER_OF_MASTER_VMS | default(3) }}"
        NUMBER_OF_WORKER_VMS: "{{ NUMBER_OF_WORKER_VMS | default(0) }}"
        MACHINE_NETWORK: "{{ MACHINE_NETWORK | default('') }}"
        REGISTRY_CERT_VAULT_PATH: "certificates/data/mirror-registry-cert"
        SSH_KEY: "{{ SSH_KEY | default('') }}"
        SERVICE_NETWORK: 172.29.0.0/20
        SUSHY_SERVER: "{{ SUSHY_SERVER | default('') }}"
        VM_BRIDGE_INTERFACE: "{{ VM_BRIDGE_INTERFACE | default(['br0']) }}"
        VM_RAM_MB: "{{ VM_RAM_MB | default(16384) }}"
        VM_vCPUS: "{{ VM_vCPUS | default(4) }}"
        VM_OS: "{{ VM_OS | default('rhel9.2.0') }}"
        CONTROL_PLANE_NAMES: "{{ CONTROL_PLANE_NAMES | default(['control1', 'control2', 'control3']) }}"
        WORKER_NAMES: "{{ WORKER_NAMES | default(['worker1', 'worker2', 'worker3']) }}"
        VLANS: "{{ VLANS | default({'enabled': false, 'bond_ports': [NETWORK_INTERFACE], 'bond_name': 'bond0', 'bond_mode': 'active-backup', 'machine_vlan_id': '1', 'mtu': '1500'}) }}"
        BOND_SUBINTERFACE: "{{ BOND_SUBINTERFACE | default(VLANS.bond_name + '.' + VLANS.machine_vlan_id) }}"

        # IP address base for machine network - will be incremented for each node
        MACHINE_IP_BASE: "{{ MACHINE_IP_BASE | default('') }}"
        MACHINE_IP_START: "{{ MACHINE_IP_START | default(1) }}"

    # Refactoring assisted by Cursor ussing Claude 4 Sonnet
    - name: Generate control plane node parameters
      set_fact:
        control_plane_params: "{{ control_plane_params | default([]) + [node_config] }}"
      loop: "{{ CONTROL_PLANE_NAMES }}"
      loop_control:
        index_var: node_index
        loop_var: node_name
      vars:
        calculated_ip: "{{ MACHINE_IP_BASE }}.{{ (MACHINE_IP_START | int + node_index | int) | string }}"
        node_config:
          bootMode: legacy
          openshift_control_node: true
          openshift_node_bmc:
            address: "{{ SUSHY_SERVER }}"
            username: admin
            password: password123
          openshift_node_cidr: "{{ NETWORK_CIDR }}"
          openshift_node_shortname: "{{ node_name }}"
          openshift_node_fqdn: "{{ node_name }}.{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}"
          openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
          openshift_node_nameservers:
            - "{{ DNS_NAMESERVER }}"
          openshift_node_machine_ip_address: "{{ calculated_ip }}"
          openshift_node_install_device: /dev/vda
          openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"

    # Refactoring assisted by Cursor ussing Claude 4 Sonnet
    - name: Generate worker node parameters
      set_fact:
        worker_params: "{{ worker_params | default([]) + [node_config] }}"
      loop: "{{ WORKER_NAMES }}"
      loop_control:
        index_var: node_index
        loop_var: node_name
      vars:
        calculated_ip: "{{ MACHINE_IP_BASE }}.{{ (MACHINE_IP_START | int + NUMBER_OF_MASTER_VMS | int + node_index | int) | string }}"
        node_config:
          bootMode: legacy
          openshift_control_node: false
          openshift_node_bmc:
            address: "{{ SUSHY_SERVER }}"
            username: admin
            password: password123
          openshift_node_cidr: "{{ NETWORK_CIDR }}"
          openshift_node_shortname: "{{ node_name }}"
          openshift_node_fqdn: "{{ node_name }}.{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}"
          openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
          openshift_node_nameservers:
            - "{{ DNS_NAMESERVER }}"
          openshift_node_machine_ip_address: "{{ calculated_ip }}"
          openshift_node_install_device: /dev/vda
          openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS |int > 0

    - name: Combine control plane and worker parameters
      set_fact:
        OPENSHIFT_CLUSTER_PROVISION_PARAMS: "{{ control_plane_params + (worker_params | default([])) }}"
    
    # Refactoring assisted by Cursor ussing Claude 4 Sonnet
    - name: Retrieve secrets from Vault
      ansible.builtin.include_role:
        name: vault_read_storage
      vars:
        vault_path: "{{ item.path }}"
        fact_var_name: "{{ item.fact_name }}"
        certificate_data_path: "{{ item.data_path }}"
        decode_certificate: "{{ item.decode }}"
      loop:
        - path: "{{ REGISTRY_CERT_VAULT_PATH }}"
          fact_name: "ADDITIONAL_TRUST_BUNDLE"
          data_path: "data.data.data.certificate"
          decode: true
        - path: "credentials/data/OpenShift_Pull"
          fact_name: "PULL_SECRET"
          data_path: "data.data.data.pull_secret"
          decode: true
        - path: "credentials/data/OCP_SSHKEY"
          fact_name: "SSH_KEY"
          data_path: "data.data.data.public_key"
          decode: false
      loop_control:
        label: "{{ item.fact_name }}"
      when: RETRIEVE_FROM_VAULT is defined and RETRIEVE_FROM_VAULT | bool

    - name: Ensure boolean variables are defined
      assert:
        that:
          - vars[item] is defined
          - vars[item] is not none
        fail_msg: "Variable '{{ item }}' is undefined. Playbook cannot continue."
      loop:
        - RETRIEVE_FROM_VAULT

    - name: Ensure string variables are defined and not empty
      assert:
        that:
          - vars[item] is defined
          - vars[item] | length > 0
        fail_msg: "Variable '{{ item }}' is undefined or empty. Playbook cannot continue."
      loop: 
        - PULL_SECRET
        - SSH_KEY


    - name: Libvirt Install Tasks
      block:
        - name: Get VMs list
          community.libvirt.virt:
            command: list_vms
          register: existing_vms
          changed_when: no
        
        - name: Create Control Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          vars:
            vm_libvirt_disk_path: "{{ LIBVIRT_DISK_PATH }}"
            vm_libvirt_pool_name: "{{ LIBVIRT_POOL_NAME }}"
            vm_libvirt_disk_size: "{{ LIBVIRT_DISK_SIZE }}"
            node_type: "control plane"
          loop: "{{ CONTROL_PLANE_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: vm_name not in existing_vms.list_vms

        - name: Create Worker Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          vars:
            vm_libvirt_disk_path: "{{ WORKER_LIBVIRT_DISK_PATH }}"
            vm_libvirt_pool_name: "{{ WORKER_LIBVIRT_POOL_NAME }}"
            vm_libvirt_disk_size: "{{ WORKER_LIBVIRT_DISK_SIZE }}"
            node_type: "worker"
          loop: "{{ WORKER_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: 
            - vm_name not in existing_vms.list_vms 
            - WORKER_NAMES is defined 
            - NUMBER_OF_WORKER_VMS !=0
      when: install_libvirt| default(false) | bool

    - name: register control plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}.{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}"
      register: control_plane_info
      loop: "{{ CONTROL_PLANE_NAMES }}"
      loop_control:
        loop_var: vm_name
    
    - name: register worker plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}.{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}"
      register: worker_info
      loop: "{{ WORKER_NAMES }}"
      loop_control:
        loop_var: vm_name
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Set UUID variables for control plane VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ control_plane_info.results }}"

    - name: Set UUID variables for worker VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ worker_info.results }}"
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Display only UUID variables
      debug:
        msg: "{{ item }}: {{ hostvars[inventory_hostname][item] }}"
      loop: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'match', '.*_uuid$') | map(attribute='key') | list }}"
   
    - name: Configure RedFish for KVM
      ansible.builtin.include_role:
        name: sushy_tools_setup
      when: install_sushy| default(false) | bool

    - name: Set Host Interface Facts
      ansible.builtin.include_role:
        name: get_network_interfaces 

    - name: Ensure LOCAL {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
    - name: Create install-config.yaml
      ansible.builtin.include_role:
        name: openshift_install_config

    - name: Save Install Config
      ansible.builtin.include_role:
        name: vault_write_storage
      vars:
        vault_secret_key_name: install_config
        full_path_to_file: '{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml'

- name: Configure DNS
  hosts: dns
  gather_facts: false
  vars:
    create_dns: false
  tasks:
    - name: Get cluster parameters from KVM host
      set_fact:
        OPENSHIFT_CLUSTER_PROVISION_PARAMS: "{{ hostvars[groups['kvm'][0]]['OPENSHIFT_CLUSTER_PROVISION_PARAMS'] }}"
        CLUSTER_NAME: "{{ hostvars[groups['kvm'][0]]['CLUSTER_NAME'] }}"
        BASE_DOMAIN: "{{ hostvars[groups['kvm'][0]]['BASE_DOMAIN'] }}"
        API_VIP: "{{ hostvars[groups['kvm'][0]]['API_VIP'] }}"
        APP_VIP: "{{ hostvars[groups['kvm'][0]]['APP_VIP'] }}"
        BOOTSTRAP_STATIC_IP: "{{ hostvars[groups['kvm'][0]]['BOOTSTRAP_STATIC_IP'] }}"
      when: create_dns| default(false)|bool

    - name: Creating DNS Entries...
      ansible.builtin.include_role:
        name: dns_settings_pfsense
      when: create_dns| default(false)|bool

- name: Activate Bastion
  hosts: bastion
  gather_facts: true
  tasks:
    - name: Get cluster variables from KVM host
      set_fact:
        CLUSTER_NAME: "{{ hostvars[groups['kvm'][0]]['CLUSTER_NAME'] }}"
        BASE_DOMAIN: "{{ hostvars[groups['kvm'][0]]['BASE_DOMAIN'] }}"
        OPENSHIFT_INSTALL_DIRECTORY: "{{ hostvars[groups['kvm'][0]]['OPENSHIFT_INSTALL_DIRECTORY'] }}"
        INSTALL_USER: "{{ hostvars[groups['kvm'][0]]['INSTALL_USER'] }}"
        OPENSHIFT_BAREMETAL_INSTALL: "{{ hostvars[groups['kvm'][0]]['OPENSHIFT_BAREMETAL_INSTALL'] }}"
        OPENSHIFT_VERSION: "{{ hostvars[groups['kvm'][0]]['OPENSHIFT_VERSION'] }}"
        INSTALL_USER_BINARY_PATH: "{{ hostvars[groups['kvm'][0]]['INSTALL_USER_BINARY_PATH'] }}"
        KVM_PACKAGES: "{{ hostvars[groups['kvm'][0]]['KVM_PACKAGES'] }}"
        OPENSHFIT_DOWNLOAD_URL: "{{ hostvars[groups['kvm'][0]]['OPENSHFIT_DOWNLOAD_URL'] }}"
        HASHI_VAULT_URL: "{{ hostvars[groups['kvm'][0]]['HASHI_VAULT_URL'] }}"
        HASHI_VAULT_ROLE_ID: "{{ hostvars[groups['kvm'][0]]['HASHI_VAULT_ROLE_ID'] }}"
        HASHI_VAULT_SECRET_ID: "{{ hostvars[groups['kvm'][0]]['HASHI_VAULT_SECRET_ID'] }}"
        HASHI_VAULT_PATH: "{{ hostvars[groups['kvm'][0]]['HASHI_VAULT_PATH'] }}"

    - name: Install HVAC requirement to interact with Vault
      ansible.builtin.package:
        name: python3-hvac
        state: present

    - name: Ensure REMOTE {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
        owner: "{{ INSTALL_USER }}"

    - name: remove any previous install configs
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        state: absent

    - name: Get Install Config From Vault
      ansible.builtin.include_role:
        name: vault_read_storage
      vars:
        vault_path: "configs/data/{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}"
        fact_var_name: "INSTALL_CONFIG"
        certificate_data_path: "data.data.data.install_config"
        decode_certificate: true    

    - name: Write retrieved certificate to local file
      copy:
        dest: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        content: "{{ INSTALL_CONFIG }}"


    - name: Decide Which Binary to install with
      ansible.builtin.set_fact:
        OPENSHIFT_INSTALL_BINARY:  "{{ 'openshift-baremetal-install' if OPENSHIFT_BAREMETAL_INSTALL | default(false) | bool else 'openshift-install' }}"  

    - name: Check if versioned binaries already exist
      stat:
        path: "{{ INSTALL_USER_BINARY_PATH }}/{{ item }}-{{ OPENSHIFT_VERSION }}"
      register: binary_check
      loop:
        - oc
        - "{{ OPENSHIFT_INSTALL_BINARY }}"

    - name: Get the proper version of OpenShift
      ansible.builtin.include_role:
        name: download_ocp_binaries
      when: binary_check.results | map(attribute='stat.exists') | select('equalto', false) | list | length > 0

    - name: Setup KVM on Bastion
      ansible.builtin.include_role:
        name: bastion_libvirt
    
    - name: Sleep for 30 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 30
      when: SLEEP is defined and SLEEP | bool
      
    - name: Launch OpenShift Installer
      become: true
      become_user: "{{ INSTALL_USER }}"
      ansible.builtin.command: "{{ INSTALL_USER_BINARY_PATH }}/{{ OPENSHIFT_INSTALL_BINARY }}-{{ OPENSHIFT_VERSION }} --dir={{ OPENSHIFT_INSTALL_DIRECTORY }} create cluster"
      register: openshift_install_results
