---
- name: Create VM on KVM Host
  hosts: kvm
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    install_libvirt: true
    install_sushy: false
  tasks:
    - name: Set the facts
      set_fact:
        ADDITIONAL_TRUST_BUNDLE: false
        API_VIP: 10.0.1.40 
        APP_VIP: 10.0.1.41
        BASE_DOMAIN: ocp4.example.com
        BOOTSTRAP_STATIC_IP: 10.0.2.95
        BOOTSTRAP_GW: 10.0.1.7
        BOOTSTRAP_DNS: 10.0.1.7
        CLUSTER_NAME: one
        CLUSTER_NETWORK: 172.30.0.0/16
        DNS_NAMESERVER: 10.0.1.7
        HASHI_VAULT_URL: "https://vault.example.com"
        HASHI_VAULT_ROLE_ID: ""
        HASHI_VAULT_SECRET_ID:  ""
        HASHI_VAULT_PATH: configs/data/{{ CLUSTER_NAME }}.{{ BASE_DOMAIN }}
        HTTPS_PROXY: "http://mirror-registry.ocp4.example.com:3128"
        HTTP_PROXY: "http://mirror-registry.ocp4.example.com:3128"
        INSTALL_USER: ocp
        INSTALL_USER_BINARY_PATH: "/home/{{ INSTALL_USER }}/.local/bin/"
        KVM_PACKAGES:
          - qemu-kvm
          - libvirt
          - virt-install
        LIBVERT_POOL_NAME: "vm-nvmes"
        LIBVIRT_POOL_DIRECTORY: "libvirt_nvmes"
        LIBVIRT_DISK_PATH: "/var/lib/{{ LIBVIRT_POOL_DIRECTORY }}"
        LIBVIRT_DISK_SIZE: 120
        OPENSHIFT_VERSION: 4.17.11
        OPENSHIFT_BAREMETAL_INSTALL: true
        OPENSHFIT_DOWNLOAD_URL: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ OPENSHIFT_VERSION }}"
        OPENSHIFT_INSTALL_DIRECTORY: "/home/{{ INSTALL_USER }}/{{ CLUSTER_NAME }}"
        NETWORK_BRIDGE: br0
        NETWORK_INTERFACE: enp1s0
        NETWORK_GATEWAY: 10.0.1.7
        NETWOKR_CIDR: 22
        NO_PROXY: localhost,127.0.0.1,api.openshift.com,example.com
        NUMBER_OF_MASTER_VMS: 3
        NUMBER_OF_WORKER_VMS: 0
        MACHINE_NETWORK: 10.0.5.0/22
        REGISTRY_CERT_VAULT_PATH: "certificates/data/mirror-registry-cert"
        SSH_KEY: ""
        SERVICE_NETWORK: 172.29.0.0/20
        SUSHY_SERVER: 10.0.1.1
        VM_BRIDGE_INTERFACE: 
          - bridge-94
          - bridge-99
        VM_RAM_MB: 16384
        VM_vCPUS: 6
        VM_OS: rhel9.2.0
        CONTROL_PLANE_NAMES:
          - ocp-control1
          - ocp-control2
          - ocp-control3
        WORKER_NAMES:
          - ocp-worker1
          - ocp-worker2
          - ocp-worker3
        VLANS:
            enabled: true
            bond_ports:
              - "{{ NETWORK_INTERFACE }}"
            bond_name: "bond0"
            bond_mode: "active-backup"
            machine_vlan_id: "94"
            mtu: "1500"
        BOND_SUBINTERFACE: "{{ VLANS.bond_name }}.{{ VLANS.machine_vlan_id }}"

        OPENSHIFT_CLUSTER_PROVISION_PARAMS:
          - bootMode: legacy
            openshift_control_node: true
            openshift_node_bmc:
              address: "{{ SUSHY_SERVER }}"
              username: admin
              password: password123
            openshift_node_cidr: "{{ NETWOKR_CIDR }}"
            openshift_node_fqdn: "{{ CONTROL_PLANE_NAMES[0] }}"
            openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
            openshift_node_nameservers:
              - "{{ DNS_NAMESERVER }}"
            openshift_node_machine_ip_address: 10.0.2.1
            openshift_node_install_device: /dev/vda
            openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"
          - bootMode: legacy
            openshift_control_node: true
            openshift_node_bmc:
              address: "{{ SUSHY_SERVER }}"
              username: admin
              password: password123
            openshift_node_cidr: "{{ NETWOKR_CIDR }}"
            openshift_node_fqdn: "{{ CONTROL_PLANE_NAMES[1] }}"
            openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
            openshift_node_nameservers:
              - "{{ DNS_NAMESERVER }}"
            openshift_node_machine_ip_address: 192.168.95.2
            openshift_node_install_device: /dev/vda
            openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"
          - bootMode: legacy
            openshift_control_node: true
            openshift_node_bmc:
              address: "{{ SUSHY_SERVER }}"
              username: admin
              password: password123
            openshift_node_cidr: "{{ NETWOKR_CIDR }}"
            openshift_node_fqdn: "{{ CONTROL_PLANE_NAMES[2] }}"
            openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
            openshift_node_nameservers:
              - "{{ DNS_NAMESERVER }}"
            openshift_node_machine_ip_address: 192.168.95.3
            openshift_node_install_device: /dev/vda
            openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"
          - bootMode: legacy
            openshift_control_node: false
            openshift_node_bmc:
              address: "{{ SUSHY_SERVER }}"
              username: admin
              password: password123
            openshift_node_cidr: "{{ NETWOKR_CIDR }}"
            openshift_node_fqdn: "{{ WORKER_NAMES[0] }}"
            openshift_node_gateway: "{{ NETWORK_GATEWAY }}"
            openshift_node_nameservers:
              - "{{ DNS_NAMESERVER }}"
            openshift_node_machine_ip_address: 192.168.95.4
            openshift_node_install_device: /dev/vda
            openshift_node_primary_nic: "{{ NETWORK_INTERFACE }}"
    
    - block:
      - name: Get Mirror Registry Cert
        ansible.builtin.include_role:
          name: vault_read_storage
        vars:
          vault_path: "{{ REGISTRY_CERT_VAULT_PATH }}"
          fact_var_name: "ADDITIONAL_TRUST_BUNDLE"
          certificate_data_path: "data.data.data.certificate"
          decode_certificate: true

      - name: Get Mirror Registry Cert
        ansible.builtin.include_role:
          name: vault_read_storage
        vars:
          vault_path: "credentials/data/OpenShift_Pull"
          fact_var_name: "PULL_SECRET"
          certificate_data_path: "data.data.data.pull_secret"
          decode_certificate: false
      
      - name: Get Mirror Registry Cert
        ansible.builtin.include_role:
          name: vault_read_storage
        vars:
          vault_path: "credentials/data/OCP_SSHKEY"
          fact_var_name: "SSH_KEY"
          certificate_data_path: "data.data.data.public_key"
          decode_certificate: false
      when: RETRIEVE_FROM_VAULT is defined and  RETRIEVE_FROM_VAULT| bool

    - name: Ensure all required variables are defined and not empty
      assert:
        that:
          - vars[item] is defined
          - vars[item] | length > 0
        fail_msg: "Variable '{{ item }}' is undefined or empty. Playbook cannot continue."
      loop: 
        - RETRIEVE_FROM_VAULT
        - PULL_SECRET
        - SSH_KEY


    - name: Libvirt Install Tasks
      block:
        - name: Get VMs list
          community.libvirt.virt:
            command: list_vms
          register: existing_vms
          changed_when: no
        
        - name: Create Control Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          loop: "{{ CONTROL_PLANE_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: vm_name not in existing_vms.list_vms

        - name: Create Worker Plane VMs
          ansible.builtin.include_role:
            name: create_kvm_guest
          loop: "{{ WORKER_NAMES }}"
          loop_control:
            loop_var: vm_name
          when: 
            - vm_name not in existing_vms.list_vms 
            - WORKER_NAMES is defined 
            - NUMBER_OF_WORKER_VMS !=0
      when: install_libvirt| default(false) | bool

    - name: register control plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}"
      register: control_plane_info
      loop: "{{ CONTROL_PLANE_NAMES }}"
      loop_control:
        loop_var: vm_name
    
    - name: register worker plane info
      community.libvirt.virt:
        command: uuid
        name: "{{ vm_name }}"
      register: worker_info
      loop: "{{ WORKER_NAMES }}"
      loop_control:
        loop_var: vm_name
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Set UUID variables for control plane VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ control_plane_info.results }}"

    - name: Set UUID variables for worker VMs
      set_fact:
        "{{ item.vm_name | replace('-','_') }}_uuid": "{{ item.uuid }}"
      loop: "{{ worker_info.results }}"
      when: 
        - WORKER_NAMES is defined
        - NUMBER_OF_WORKER_VMS !=0

    - name: Display only UUID variables
      debug:
        msg: "{{ item }}: {{ hostvars[inventory_hostname][item] }}"
      loop: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'match', '.*_uuid$') | map(attribute='key') | list }}"

    - name: Ensure LOCAL {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
        
    - name: Save Install Config
      ansible.builtin.include_role:
        name: vault_write_storage
      vars:
        file_name: install-config.yaml
        full_path_to_file: '{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml'
    
    - name: Configure RedFish for KVM
      ansible.builtin.include_role:
        name: sushy_tools_setup
      when: install_sushy| default(false) | bool

    - name: Set Host Interface Facts
      ansible.builtin.include_role:
        name: get_network_interfaces 

    - name: Create install-config.yaml
      ansible.builtin.include_role:
        name: openshift_install_config

- name: Configure DNS
  hosts: dns
  gather_facts: false
  vars_files:
    vars.yaml
  vars:
    create_dns: false
  tasks:
    - name: Creating DNS Entries...
      ansible.builtin.include_role:
        name: dns_settings_pfsense
      when: create_dns| default(false)|bool

- name: Activate Bastion
  hosts: bastion
  gather_facts: true
  vars_files:
    vars.yaml
  tasks:
    - name: Ensure REMOTE {{ CLUSTER_NAME }} Directory Exists
      ansible.builtin.file:
        path: "{{ OPENSHIFT_INSTALL_DIRECTORY }}"
        state: directory
        owner: "{{ INSTALL_USER }}"  
      
    - name: Copy install-config.yaml to bastion
      copy:
        src: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        dest: "{{ OPENSHIFT_INSTALL_DIRECTORY }}/install-config.yaml"
        mode: '0644'
        owner: "{{ INSTALL_USER }}" 
    - name: Decide Which Binary to install with
      ansible.builtin.set_fact:
        OPENSHIFT_INSTALL_BINARY:  "{{ 'openshift-baremetal-install' if OPENSHIFT_BAREMETAL_INSTALL | default(false) | bool else 'openshift-install' }}"  

    - name: Check if versioned binaries already exist
      stat:
        path: "{{ INSTALL_USER_BINARY_PATH }}/{{ item }}-{{ OPENSHIFT_VERSION }}"
      register: binary_check
      loop:
        - oc
        - "{{ OPENSHIFT_INSTALL_BINARY }}"

    - name: Get the proper version of OpenShift
      ansible.builtin.include_role:
        name: download_ocp_binaries
      when: binary_check.results | map(attribute='stat.exists') | select('equalto', false) | list | length > 0

    - name: Setup KVM on Bastion
      ansible.builtin.include_role:
        name: bastion_libvirt
    
    - name: Sleep for 30 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 30
      delegate_to: localhost

    - name: Launch OpenShift Installer
      become: true
      become_user: "{{ INSTALL_USER }}"
      ansible.builtin.command: "{{ INSTALL_USER_BINARY_PATH }}/{{ OPENSHIFT_INSTALL_BINARY }}-{{ OPENSHIFT_VERSION }} --dir={{ OPENSHIFT_INSTALL_DIRECTORY }} create cluster"
      register: openshift_install_results
